import dotenv from 'dotenv'
import { Sequelize } from 'sequelize'

// Cargar variables de entorno seg√∫n el entorno actual
const currentEnv = process.env.NODE_ENV || 'development'

// Seleccionar el archivo .env correcto seg√∫n el entorno
dotenv.config({
	path: `.env.${currentEnv}`,
})

// Configuraci√≥n de la base de datos por entorno
const dbConfig = {
	development: {
		database: process.env.DB_NAME,
		username: process.env.DB_USER,
		password: process.env.DB_PASS,
		host: process.env.DB_HOST,
		port: process.env.DB_PORT,
		dialect: process.env.DIALECT,
		logging: false,
		pool: {
			max: 5,
			min: 0,
			acquire: 30000,
			idle: 10000,
		},
		define: {
			timestamps: false,
			freezeTableName: true,
			underscored: false,
		},
	},
	production: {
		database: process.env.DB_NAME,
		username: process.env.DB_USER,
		password: process.env.DB_PASS,
		host: process.env.DB_HOST,
		port: process.env.DB_PORT,
		dialect: process.env.DIALECT,
		logging: false,
		pool: {
			max: 10,
			min: 2,
			acquire: 30000,
			idle: 10000,
		},
		define: {
			timestamps: false,
			freezeTableName: true,
			underscored: false,
		},
		dialectOptions: {
			ssl:
				process.env.DB_SSL === 'true'
					? {
							require: true,
							rejectUnauthorized: false,
					  }
					: false,
		},
	},
	test: {
		database: process.env.DB_NAME_TEST,
		username: process.env.DB_USER,
		password: process.env.DB_PASS,
		host: process.env.DB_HOST,
		port: process.env.DB_PORT,
		dialect: process.env.DIALECT,
		logging: false,
	},
}

// Obtener configuraci√≥n actual
const config = dbConfig[currentEnv]

// Crear instancia de Sequelize
const sequelize = new Sequelize(config.database, config.username, config.password, config)

// Funci√≥n para conectar a la base de datos
export const connectDatabase = async () => {
	try {
		await sequelize.authenticate()
		console.log('‚úÖ Conexi√≥n a PostgreSQL establecida correctamente')
		console.log(`üìä Base de datos: ${config.database}`)
		console.log(`üè† Host: ${config.host}:${config.port}`)
		console.log(`üë§ Usuario: ${config.username}`)
		console.log(`üåç Entorno: ${currentEnv}`)

		return sequelize
	} catch (error) {
		console.error('‚ùå Error al conectar con PostgreSQL:', error)
		throw error
	}
}

// Funci√≥n para cerrar la conexi√≥n
export const closeDatabase = async () => {
	try {
		await sequelize.close()
		console.log('üîê Conexi√≥n a PostgreSQL cerrada correctamente')
	} catch (error) {
		console.error('‚ùå Error al cerrar la conexi√≥n:', error)
		throw error
	}
}

// Funci√≥n para verificar la conexi√≥n
export const testConnection = async () => {
	try {
		await sequelize.authenticate()
		return true
	} catch (error) {
		console.error('‚ùå Error en la conexi√≥n:', error)
		return false
	}
}

export { sequelize }
export default sequelize
